{"version":3,"sources":["components/Jumbotron/hellokittyBanner.jpg","components/FriendCard/FriendCard.js","components/Wrapper/Wrapper.js","components/Navbar/Navbar.js","components/Footer/Footer.js","components/Jumbotron/Jumbotron.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","FriendCard","props","react_default","a","createElement","className","onClick","userClick","alt","name","src","image","onclick","clickPicture","id","Wrapper","children","Navbar","score","highScore","Footer","console","log","hellokittyBanner","Jumbotron","printResult","App","state","friends","imageClicked","event","preventDefault","currentImage","target","clickedImage","_this","indexOf","topScore","alert","setState","sort","b","Math","random","_this$setState","newScore","Object","defineProperty","concat","_this2","this","Wrapper_Wrapper","Jumbotron_Jumbotron","components_Navbar_Navbar","map","friend","components_FriendCard_FriendCard","key","components_Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4673d145.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hellokittyBanner.01356b1e.jpg\";","import React from \"react\";\n\nimport \"./FriendCard.css\";\n\n// set props for FriendCard\nconst FriendCard = props => (\n\n    <div className=\"card\" onClick={props.userClick}>\n      <div className=\"image-container\">\n        <img className=\"img-thumbnail img-responsive\"\n          alt={props.name}\n          src={props.image}\n          onclick={() => props.clickPicture(props.id)}\n        />\n      </div>\n    </div>\n);\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./Style.css\";\n\n// function Wrapper that takes in the argument props and will return all of the props.children information\n// similar to 16-stu in class assignment\nfunction Wrapper(props) {\n  return <div className=\"Wrapper\">\n  {props.children}\n  </div>\n};\n\nexport default Wrapper;\n\n\n","import React, {Component} from \"react\";\nimport \"../Navbar/Style.css\";\n\n\nconst Navbar = props => (\n\n  <nav className=\"navbar navbar-toggler navbar-light\">\n  \n  <ul>\n    <li className=\"Left\">Score: {props.score}</li>\n    <li className=\"Left\">highScore: {props.highScore}</li>\n  </ul>\n  </nav>\n);\n\nexport default Navbar;\n\n","// this will be used as a reusable Footer \nimport React from \"react\";\nimport \"../Footer/Style.css\";\n\nconst Footer = () => (\n  <div className=\"Footer\">\n  <h3>Thank you for Playing!</h3>\n  <p>Created By: Chehlsee</p>\n  </div>\n);\n\nexport default Footer;\n\n\n","// always import react first\nimport React from \"react\";\nimport \"../Jumbotron/Style.css\";\nimport hellokittyBanner from './hellokittyBanner.jpg';\n\nconsole.log(hellokittyBanner);\n\n\nfunction Jumbotron (props) {\n  \n  return (\n  <div className=\"jumbotronImage header\">\n  <h1>\n    {props.printResult}</h1>\n    <h2>Chehlsee's Clicky Game!</h2>\n    <h3>Rules: Click on each image only once!</h3>\n    </div>\n);\n}\n\n// need to export or else it will not render\nexport default Jumbotron;\n\n\n\n\n// how to import an image\n// import React from 'react';\n// import logo from './logo.png'; // Tell Webpack this JS file uses this image\n\n// console.log(logo); // /logo.84287d09.png\n\n// function Header() {\n//   // Import result is the URL of your image\n//   return <img src={logo} alt=\"Logo\" />;\n// }\n\n// export default Header;","import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard/FriendCard\";\nimport Wrapper from \"./components/Wrapper/Wrapper\";\nimport Title from \"./components/Title/Title\";\nimport friends from \"./friends.json\";\n// Navbar and footer not connected?\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Footer from \"./components/Footer/Footer\";\n//  this is not connected\nimport \"./App.css\";\nimport Jumbotron from \"./components/Jumbotron/Jumbotron\";\n\n// class App extends Component {\n// render(){\n// return (\n// setting this.state.friends to the friends json array this is similar to the inclass assignment\n// state ={\n// friends,\n// imageClicked: [],\n// score: 0,\n// highScore: 0,\n// printResult: \"\",\n// }\n// );\n// }\n\n// code is similar to in class friends assignment\nclass App extends Component {\n  // setting this.state.friends to friends json array\n  state = {\n    friends,\n    imageClicked: [],\n    score: 0,\n    highScore: 0,\n    printResult: \"\"\n  };\n\n  // filter this.state.friends for friends with an id not equal to the id that is being removed\n  // set this.friends.state.friends equal to the new friends array\n\n  // the remove friend was used in 16-stu assignment but we don't need to remove the cards here\n  // removeFriend = id => {\n  // const friends = this/state.friends.filter(friend => friend.id !== id);\n  // this.setState({friends});\n  // };\n\n\n  userClick = event => {\n    // this method stops the default action of an element from happening. ex. to prevent a submit button from submitting a form\n    event.preventDefault();\n\n    // set variable to currentImage\n    const currentImage = event.target.alt;\n    // console log when current image is clicked\n    console.log(event.target.alt);\n    // update state with the clicked image data to current image\n    // image is only allowed to be clicked 1 or 0 \n    const clickedImage = this.state.imageClicked.indexOf(currentImage) > -1;\n\n    // console log if the image has already been clicked by the user\n    console.log(\"this image has been clicked\" + clickedImage);\n\n\n    // high score\n    const topScore = this.state.highScore;\n\n    if (clickedImage) {\n      alert(\"You already clicked this image please try another!\");\n      this.setState({\n        friends: this.state.friends.sort\n          // this creates a random sorted array\n          // it will sort the array from small number to bigger number, the value a-b returns a negative number so the smaller number will be in the front\n          (function (a, b) {\n            // math.random() can create number 0~1 excluded which means the result of 0.5 - Math.random() could be either a positive or negative value\n            return 0.5 - Math.random();\n          })\n      });\n\n      // console.log(\"score\" + score);\n      // console.log(\"highScore\" + highScore);\n      console.log(\"TS\" + topScore);\n      console.log(this.state.highScore);\n\n      // ! means not clicked image\n    } else if (!clickedImage) {\n\n      // if the image that was clicked was not clicked before add the score +1\n      const newScore = this.state.score + 1\n\n      if (newScore === 1) {\n        this.setState({\n          // friends info\n          score: newScore,\n          // highScore: topScore,\n          printResult: `Woo!`,\n        });\n      }\n\n      // if (this.state.score > 1) { console.log(\"HS\" + + this.state.highScore);\n      // update the state with the newScore data if imageClicked was only clicked 0-1 times\n      if (newScore >= this.state.highScore) {\n        this.setState({\n          friends: this.state.friends.sort(function (a, b) {\n            return 0.5 - Math.random();\n          }),\n          friends,\n          imageClicked: this.state.imageClicked.concat(currentImage),\n          highScore: newScore,\n          score: newScore,\n          printResult: `Woo!`\n        })\n\n        // there are 10 friends in the friends.json file so in order to win the game only one character image can be clicked at a time\n        if (newScore === 10) {\n          // alert(\"You win!\")\n          this.setState({\n            friends: this.state.friends.sort(function (a, b) {\n              return 0.5 - Math.random;\n            }),\n            score: 0,\n            highScore: 0,\n            printResult: \"Woo!\"\n          });\n          alert(\"this game is fun!\");\n        }\n\n      }\n    }\n\n\n  };\n\n\n  // same as inclass assignment 16 stu\n  render() {\n    return (\n      <Wrapper>\n        <Jumbotron>\n        </Jumbotron>\n\n        {/* score is not printing to the navbar */}\n        <Navbar \n        score={this.state.score}\n        highScore={this.state.score}>\n        {this.state.score}\n               {this.state.highScore}\n\n        </Navbar>\n          {this.state.friends.map(friend => (\n            <FriendCard \n             id={friend.id}\n               key={friend.id}\n               name={friend.name}\n               image={friend.image}\n               FriendCard userClick = {this.userClick}\n            />\n          ))}\n        <Footer>\n        </Footer>\n      </Wrapper>\n    )\n  }\n\n}\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}